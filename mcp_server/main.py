# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T07:46:35+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Path

app = MCPProxy(
    contact={'email': 'matiasbonet@oceandrivers.com'},
    description='This is the api to access the ODWeather API information',
    title='ODWeather',
    version='1.0',
    servers=[{'url': 'https://api.oceandrivers.com/'}],
)


@app.get(
    '/v1.0/compareStation/{stationName}/',
    description=""" Get forecast and realtime information for known points<br/>None """,
    tags=['weather_station_data'],
)
def compare_station(station_name: str = Path(..., alias='stationName')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1.0/getAemetStation/{stationName}/{period}/',
    description=""" Get data from the aemet stations<br/>None """,
    tags=['weather_station_data', 'easywind_data_access'],
)
def get_aemet_station(
    station_name: str = Path(..., alias='stationName'), period: str = 'lastdata'
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1.0/getEasyWind/{easywindId}/',
    description=""" Get data from the easywind weather stations<br/>None """,
    tags=['easywind_data_access'],
)
def get_easywind(
    easywind_id: str = Path(..., alias='easywindId'), period: str = 'latestdata'
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1.0/getEventStations/{eventId}/',
    description=""" Get stations in an event<br/>None """,
    tags=['event_station_interaction'],
)
def get_event_stations(event_id: str = Path(..., alias='eventId')):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1.0/getForecastPoints/{yatchclubid}/language/{language}',
    description=""" Get forecast points of a yatchclub<br/>None """,
    tags=['event_station_interaction'],
)
def get_forecast_points(yatchclubid: str = 'cnarenal', language: str = ...):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1.0/getForecastTimeSeries/{latitude}/{longitude}/',
    description=""" Get timeseries forecast information<br/>None """,
    tags=[
        'weather_station_data',
        'weather_forecasts',
        'event_station_interaction',
        'easywind_data_access',
    ],
)
def get_forecast_time_series(
    latitude: float = 39.49,
    longitude: float = 2.74,
    inittime: Optional[str] = None,
    endtime: Optional[str] = None,
    days: Optional[int] = None,
    hours: Optional[int] = None,
    weather: str = ...,
    wave: Optional[str] = None,
    entryid: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1.0/getForecastTimeSeriesWrf/{latitude}/{longitude}/',
    description=""" Get timeseries forecast information<br/>None """,
    tags=[
        'weather_station_data',
        'weather_forecasts',
        'event_station_interaction',
        'easywind_data_access',
    ],
)
def get_forecast_time_series_wrf(
    latitude: float = 39.49,
    longitude: float = 2.74,
    inittime: Optional[str] = None,
    endtime: Optional[str] = None,
    days: Optional[int] = None,
    hours: Optional[int] = None,
    weather: str = ...,
    wave: Optional[str] = None,
    entryid: Optional[str] = None,
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1.0/getSocibWeatherStation/{stationName}/{period}/',
    description=""" Get data from the socib bahia de palma buoy<br/>None """,
    tags=['weather_station_data', 'easywind_data_access'],
)
def get_socib_weather_station(
    station_name: str = Path(..., alias='stationName'), period: str = 'lastdata'
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1.0/getWeatherDisplay/{stationName}/',
    description=""" Get data from the weather display software<br/>None """,
    tags=['weather_station_data', 'weather_forecasts', 'easywind_data_access'],
)
def get_weather_display(
    station_name: str = Path(..., alias='stationName'), period: str = 'latestdata'
):
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/v1.0/getWebCams/',
    description=""" Get forecast and realtime information for known points<br/>None """,
    tags=[
        'weather_station_data',
        'weather_forecasts',
        'event_station_interaction',
        'easywind_data_access',
        'webcam_data_retrieval',
    ],
)
def get_web_cams():
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
